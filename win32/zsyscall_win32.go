// Code generated by 'go generate'; DO NOT EDIT.

package win32

import (
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modgdi32    = NewLazySystemDLL("gdi32.dll")
	modkernel32 = NewLazySystemDLL("kernel32.dll")
	moduser32   = NewLazySystemDLL("user32.dll")
	modwinmm    = NewLazySystemDLL("winmm.dll")

	procCombineRgn                = modgdi32.NewProc("CombineRgn")
	procCreateEllipticRgn         = modgdi32.NewProc("CreateEllipticRgn")
	procCreateEllipticRgnIndirect = modgdi32.NewProc("CreateEllipticRgnIndirect")
	procCreatePolyPolygonRgn      = modgdi32.NewProc("CreatePolyPolygonRgn")
	procCreatePolygonRgn          = modgdi32.NewProc("CreatePolygonRgn")
	procCreateRectRgn             = modgdi32.NewProc("CreateRectRgn")
	procCreateRectRgnIndirect     = modgdi32.NewProc("CreateRectRgnIndirect")
	procCreateRoundRectRgn        = modgdi32.NewProc("CreateRoundRectRgn")
	procCreateSolidBrush          = modgdi32.NewProc("CreateSolidBrush")
	procDPtoLP                    = modgdi32.NewProc("DPtoLP")
	procDeleteObject              = modgdi32.NewProc("DeleteObject")
	procEllipse                   = modgdi32.NewProc("Ellipse")
	procExcludeClipRect           = modgdi32.NewProc("ExcludeClipRect")
	procFillRgn                   = modgdi32.NewProc("FillRgn")
	procFrameRgn                  = modgdi32.NewProc("FrameRgn")
	procGetDeviceCaps             = modgdi32.NewProc("GetDeviceCaps")
	procGetStockObject            = modgdi32.NewProc("GetStockObject")
	procGetTextMetricsW           = modgdi32.NewProc("GetTextMetricsW")
	procIntersectClipRect         = modgdi32.NewProc("IntersectClipRect")
	procInvertRgn                 = modgdi32.NewProc("InvertRgn")
	procLineTo                    = modgdi32.NewProc("LineTo")
	procMoveToEx                  = modgdi32.NewProc("MoveToEx")
	procOffsetClipRgn             = modgdi32.NewProc("OffsetClipRgn")
	procPaintRgn                  = modgdi32.NewProc("PaintRgn")
	procPolyBezier                = modgdi32.NewProc("PolyBezier")
	procPolygon                   = modgdi32.NewProc("Polygon")
	procPolyline                  = modgdi32.NewProc("Polyline")
	procRectangle                 = modgdi32.NewProc("Rectangle")
	procRestoreDC                 = modgdi32.NewProc("RestoreDC")
	procRoundRect                 = modgdi32.NewProc("RoundRect")
	procSaveDC                    = modgdi32.NewProc("SaveDC")
	procSelectClipRgn             = modgdi32.NewProc("SelectClipRgn")
	procSelectObject              = modgdi32.NewProc("SelectObject")
	procSetBkMode                 = modgdi32.NewProc("SetBkMode")
	procSetMapMode                = modgdi32.NewProc("SetMapMode")
	procSetPolyFillMode           = modgdi32.NewProc("SetPolyFillMode")
	procSetTextAlign              = modgdi32.NewProc("SetTextAlign")
	procSetViewportExtEx          = modgdi32.NewProc("SetViewportExtEx")
	procSetViewportOrgEx          = modgdi32.NewProc("SetViewportOrgEx")
	procSetWindowExtEx            = modgdi32.NewProc("SetWindowExtEx")
	procTextOutW                  = modgdi32.NewProc("TextOutW")
	procFreeLibrary               = modkernel32.NewProc("FreeLibrary")
	procGetModuleHandleW          = modkernel32.NewProc("GetModuleHandleW")
	procGetProcAddress            = modkernel32.NewProc("GetProcAddress")
	procGetStartupInfoW           = modkernel32.NewProc("GetStartupInfoW")
	procGetSystemDirectoryW       = modkernel32.NewProc("GetSystemDirectoryW")
	procLoadLibraryExW            = modkernel32.NewProc("LoadLibraryExW")
	procBeginPaint                = moduser32.NewProc("BeginPaint")
	procCopyRect                  = moduser32.NewProc("CopyRect")
	procCreateWindowExW           = moduser32.NewProc("CreateWindowExW")
	procDefWindowProcW            = moduser32.NewProc("DefWindowProcW")
	procDispatchMessageW          = moduser32.NewProc("DispatchMessageW")
	procDrawTextW                 = moduser32.NewProc("DrawTextW")
	procEndPaint                  = moduser32.NewProc("EndPaint")
	procFillRect                  = moduser32.NewProc("FillRect")
	procFrameRect                 = moduser32.NewProc("FrameRect")
	procGetClientRect             = moduser32.NewProc("GetClientRect")
	procGetDC                     = moduser32.NewProc("GetDC")
	procGetKeyNameTextW           = moduser32.NewProc("GetKeyNameTextW")
	procGetMessageW               = moduser32.NewProc("GetMessageW")
	procGetScrollInfo             = moduser32.NewProc("GetScrollInfo")
	procGetScrollPos              = moduser32.NewProc("GetScrollPos")
	procGetSystemMetrics          = moduser32.NewProc("GetSystemMetrics")
	procGetUpdateRect             = moduser32.NewProc("GetUpdateRect")
	procInflateRect               = moduser32.NewProc("InflateRect")
	procIntersectRect             = moduser32.NewProc("IntersectRect")
	procInvalidateRect            = moduser32.NewProc("InvalidateRect")
	procInvalidateRgn             = moduser32.NewProc("InvalidateRgn")
	procInvertRect                = moduser32.NewProc("InvertRect")
	procIsRectEmpty               = moduser32.NewProc("IsRectEmpty")
	procLoadCursorW               = moduser32.NewProc("LoadCursorW")
	procLoadIconW                 = moduser32.NewProc("LoadIconW")
	procMessageBoxW               = moduser32.NewProc("MessageBoxW")
	procOffsetRect                = moduser32.NewProc("OffsetRect")
	procPeekMessageW              = moduser32.NewProc("PeekMessageW")
	procPostQuitMessage           = moduser32.NewProc("PostQuitMessage")
	procRegisterClassW            = moduser32.NewProc("RegisterClassW")
	procReleaseDC                 = moduser32.NewProc("ReleaseDC")
	procScrollWindow              = moduser32.NewProc("ScrollWindow")
	procSendMessageW              = moduser32.NewProc("SendMessageW")
	procSetCursor                 = moduser32.NewProc("SetCursor")
	procSetRect                   = moduser32.NewProc("SetRect")
	procSetRectEmpty              = moduser32.NewProc("SetRectEmpty")
	procSetScrollInfo             = moduser32.NewProc("SetScrollInfo")
	procSetScrollPos              = moduser32.NewProc("SetScrollPos")
	procSetScrollRange            = moduser32.NewProc("SetScrollRange")
	procShowCursor                = moduser32.NewProc("ShowCursor")
	procShowWindow                = moduser32.NewProc("ShowWindow")
	procTranslateMessage          = moduser32.NewProc("TranslateMessage")
	procUnionRect                 = moduser32.NewProc("UnionRect")
	procUpdateWindow              = moduser32.NewProc("UpdateWindow")
	procValidateRect              = moduser32.NewProc("ValidateRect")
	procValidateRgn               = moduser32.NewProc("ValidateRgn")
	procPlaySoundW                = modwinmm.NewProc("PlaySoundW")
)

func CombineRgn(dest HRGN, src1 HRGN, src2 HRGN, mode int32) (ret int32) {
	r0, _, _ := syscall.Syscall6(procCombineRgn.Addr(), 4, uintptr(dest), uintptr(src1), uintptr(src2), uintptr(mode), 0, 0)
	ret = int32(r0)
	return
}

func CreateEllipticRgn(x1 int32, y1 int32, x2 int32, y2 int32) (hrgn HRGN) {
	r0, _, _ := syscall.Syscall6(procCreateEllipticRgn.Addr(), 4, uintptr(x1), uintptr(y1), uintptr(x2), uintptr(y2), 0, 0)
	hrgn = HRGN(r0)
	return
}

func CreateEllipticRgnIndirect(rect *RECT) (hrgn HRGN) {
	r0, _, _ := syscall.Syscall(procCreateEllipticRgnIndirect.Addr(), 1, uintptr(unsafe.Pointer(rect)), 0, 0)
	hrgn = HRGN(r0)
	return
}

func CreatePolyPolygonRgn(pt []POINT, lpPolyCounts *int32, nCount int32, fnPolyFillMode int32) (hrgn HRGN) {
	var _p0 *POINT
	if len(pt) > 0 {
		_p0 = &pt[0]
	}
	r0, _, _ := syscall.Syscall6(procCreatePolyPolygonRgn.Addr(), 5, uintptr(unsafe.Pointer(_p0)), uintptr(len(pt)), uintptr(unsafe.Pointer(lpPolyCounts)), uintptr(nCount), uintptr(fnPolyFillMode), 0)
	hrgn = HRGN(r0)
	return
}

func CreatePolygonRgn(pt []POINT, cPoints int32, fnPolyFillMode int32) (hrgn HRGN) {
	var _p0 *POINT
	if len(pt) > 0 {
		_p0 = &pt[0]
	}
	r0, _, _ := syscall.Syscall6(procCreatePolygonRgn.Addr(), 4, uintptr(unsafe.Pointer(_p0)), uintptr(len(pt)), uintptr(cPoints), uintptr(fnPolyFillMode), 0, 0)
	hrgn = HRGN(r0)
	return
}

func CreateRectRgn(x1 int32, y1 int32, x2 int32, y2 int32) (hrgn HRGN) {
	r0, _, _ := syscall.Syscall6(procCreateRectRgn.Addr(), 4, uintptr(x1), uintptr(y1), uintptr(x2), uintptr(y2), 0, 0)
	hrgn = HRGN(r0)
	return
}

func CreateRectRgnIndirect(rect *RECT) (hrgn HRGN) {
	r0, _, _ := syscall.Syscall(procCreateRectRgnIndirect.Addr(), 1, uintptr(unsafe.Pointer(rect)), 0, 0)
	hrgn = HRGN(r0)
	return
}

func CreateRoundRectRgn(x1 int32, y1 int32, x2 int32, y2 int32, width int32, height int32) (hrgn HRGN) {
	r0, _, _ := syscall.Syscall6(procCreateRoundRectRgn.Addr(), 6, uintptr(x1), uintptr(y1), uintptr(x2), uintptr(y2), uintptr(width), uintptr(height))
	hrgn = HRGN(r0)
	return
}

func CreateSolidBrush(color COLORREF) (hbr HBRUSH) {
	r0, _, _ := syscall.Syscall(procCreateSolidBrush.Addr(), 1, uintptr(color), 0, 0)
	hbr = HBRUSH(r0)
	return
}

func DPtoLP(hdc HDC, pt []POINT) (ok bool) {
	var _p0 *POINT
	if len(pt) > 0 {
		_p0 = &pt[0]
	}
	r0, _, _ := syscall.Syscall(procDPtoLP.Addr(), 3, uintptr(hdc), uintptr(unsafe.Pointer(_p0)), uintptr(len(pt)))
	ok = r0 != 0
	return
}

func DeleteObject(hObject HGDIOBJ) (ok bool) {
	r0, _, _ := syscall.Syscall(procDeleteObject.Addr(), 1, uintptr(hObject), 0, 0)
	ok = r0 != 0
	return
}

func Ellipse(hdc HDC, left int32, top int32, right int32, bottom int32) (ok bool) {
	r0, _, _ := syscall.Syscall6(procEllipse.Addr(), 5, uintptr(hdc), uintptr(left), uintptr(top), uintptr(right), uintptr(bottom), 0)
	ok = r0 != 0
	return
}

func ExcludeClipRect(hdc HDC, left int32, top int32, right int32, bottom int32) (ret int32) {
	r0, _, _ := syscall.Syscall6(procExcludeClipRect.Addr(), 5, uintptr(hdc), uintptr(left), uintptr(top), uintptr(right), uintptr(bottom), 0)
	ret = int32(r0)
	return
}

func FillRgn(hdc HDC, hrgn HRGN, hbr HBRUSH) (ok bool) {
	r0, _, _ := syscall.Syscall(procFillRgn.Addr(), 3, uintptr(hdc), uintptr(hrgn), uintptr(hbr))
	ok = r0 != 0
	return
}

func FrameRgn(hdc HDC, hrgn HRGN, hbr HBRUSH, width int32, height int32) (ok bool) {
	r0, _, _ := syscall.Syscall6(procFrameRgn.Addr(), 5, uintptr(hdc), uintptr(hrgn), uintptr(hbr), uintptr(width), uintptr(height), 0)
	ok = r0 != 0
	return
}

func GetDeviceCaps(hdc HDC, index int32) (ret int32) {
	r0, _, _ := syscall.Syscall(procGetDeviceCaps.Addr(), 2, uintptr(hdc), uintptr(index), 0)
	ret = int32(r0)
	return
}

func GetStockObject(fnObject int32) (ret HGDIOBJ) {
	r0, _, _ := syscall.Syscall(procGetStockObject.Addr(), 1, uintptr(fnObject), 0, 0)
	ret = HGDIOBJ(r0)
	return
}

func GetTextMetrics(hdc HDC, tm *TEXTMETRIC) (err error) {
	r1, _, e1 := syscall.Syscall(procGetTextMetricsW.Addr(), 2, uintptr(hdc), uintptr(unsafe.Pointer(tm)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func IntersectClipRect(hdc HDC, left int32, top int32, right int32, bottom int32) (ret int32) {
	r0, _, _ := syscall.Syscall6(procIntersectClipRect.Addr(), 5, uintptr(hdc), uintptr(left), uintptr(top), uintptr(right), uintptr(bottom), 0)
	ret = int32(r0)
	return
}

func InvertRgn(hdc HDC, hrgn HRGN) (ok bool) {
	r0, _, _ := syscall.Syscall(procInvertRgn.Addr(), 2, uintptr(hdc), uintptr(hrgn), 0)
	ok = r0 != 0
	return
}

func LineTo(hdc HDC, x int32, y int32) (ok bool) {
	r0, _, _ := syscall.Syscall(procLineTo.Addr(), 3, uintptr(hdc), uintptr(x), uintptr(y))
	ok = r0 != 0
	return
}

func MoveToEx(hdc HDC, x int32, y int32, lpPoint *POINT) (ok bool) {
	r0, _, _ := syscall.Syscall6(procMoveToEx.Addr(), 4, uintptr(hdc), uintptr(x), uintptr(y), uintptr(unsafe.Pointer(lpPoint)), 0, 0)
	ok = r0 != 0
	return
}

func OffsetClipRgn(hdc HDC, x int32, y int32) (ret int32) {
	r0, _, _ := syscall.Syscall(procOffsetClipRgn.Addr(), 3, uintptr(hdc), uintptr(x), uintptr(y))
	ret = int32(r0)
	return
}

func PaintRgn(hdc HDC, hrgn HRGN) (ok bool) {
	r0, _, _ := syscall.Syscall(procPaintRgn.Addr(), 2, uintptr(hdc), uintptr(hrgn), 0)
	ok = r0 != 0
	return
}

func PolyBezier(hdc HDC, pt []POINT) (ok bool) {
	var _p0 *POINT
	if len(pt) > 0 {
		_p0 = &pt[0]
	}
	r0, _, _ := syscall.Syscall(procPolyBezier.Addr(), 3, uintptr(hdc), uintptr(unsafe.Pointer(_p0)), uintptr(len(pt)))
	ok = r0 != 0
	return
}

func Polygon(hdc HDC, pt []POINT) (ok bool) {
	var _p0 *POINT
	if len(pt) > 0 {
		_p0 = &pt[0]
	}
	r0, _, _ := syscall.Syscall(procPolygon.Addr(), 3, uintptr(hdc), uintptr(unsafe.Pointer(_p0)), uintptr(len(pt)))
	ok = r0 != 0
	return
}

func Polyline(hdc HDC, pt []POINT) (ok bool) {
	var _p0 *POINT
	if len(pt) > 0 {
		_p0 = &pt[0]
	}
	r0, _, _ := syscall.Syscall(procPolyline.Addr(), 3, uintptr(hdc), uintptr(unsafe.Pointer(_p0)), uintptr(len(pt)))
	ok = r0 != 0
	return
}

func Rectangle(hdc HDC, left int32, top int32, right int32, bottom int32) (ok bool) {
	r0, _, _ := syscall.Syscall6(procRectangle.Addr(), 5, uintptr(hdc), uintptr(left), uintptr(top), uintptr(right), uintptr(bottom), 0)
	ok = r0 != 0
	return
}

func RestoreDC(hdc HDC, saved int32) (ok bool) {
	r0, _, _ := syscall.Syscall(procRestoreDC.Addr(), 2, uintptr(hdc), uintptr(saved), 0)
	ok = r0 != 0
	return
}

func RoundRect(hdc HDC, left int32, top int32, right int32, bottom int32, width int32, height int32) (ok bool) {
	r0, _, _ := syscall.Syscall9(procRoundRect.Addr(), 7, uintptr(hdc), uintptr(left), uintptr(top), uintptr(right), uintptr(bottom), uintptr(width), uintptr(height), 0, 0)
	ok = r0 != 0
	return
}

func SaveDC(hdc HDC) (ret int32) {
	r0, _, _ := syscall.Syscall(procSaveDC.Addr(), 1, uintptr(hdc), 0, 0)
	ret = int32(r0)
	return
}

func SelectClipRgn(hdc HDC, hrgn HRGN) (mode int32) {
	r0, _, _ := syscall.Syscall(procSelectClipRgn.Addr(), 2, uintptr(hdc), uintptr(hrgn), 0)
	mode = int32(r0)
	return
}

func SelectObject(hdc HDC, h HGDIOBJ) (ret HGDIOBJ) {
	r0, _, _ := syscall.Syscall(procSelectObject.Addr(), 2, uintptr(hdc), uintptr(h), 0)
	ret = HGDIOBJ(r0)
	return
}

func SetBkMode(hdc HDC, mode int32) (prevMode int32) {
	r0, _, _ := syscall.Syscall(procSetBkMode.Addr(), 2, uintptr(hdc), uintptr(mode), 0)
	prevMode = int32(r0)
	return
}

func SetMapMode(hdc HDC, iMapMode int32) (ret int32) {
	r0, _, _ := syscall.Syscall(procSetMapMode.Addr(), 2, uintptr(hdc), uintptr(iMapMode), 0)
	ret = int32(r0)
	return
}

func SetPolyFillMode(hdc HDC, mode int32) (ret int32) {
	r0, _, _ := syscall.Syscall(procSetPolyFillMode.Addr(), 2, uintptr(hdc), uintptr(mode), 0)
	ret = int32(r0)
	return
}

func SetTextAlign(hdc HDC, align uint32) (ret uint32) {
	r0, _, _ := syscall.Syscall(procSetTextAlign.Addr(), 2, uintptr(hdc), uintptr(align), 0)
	ret = uint32(r0)
	return
}

func SetViewportExtEx(hdc HDC, x int32, y int32, size *SIZE) (ok bool) {
	r0, _, _ := syscall.Syscall6(procSetViewportExtEx.Addr(), 4, uintptr(hdc), uintptr(x), uintptr(y), uintptr(unsafe.Pointer(size)), 0, 0)
	ok = r0 != 0
	return
}

func SetViewportOrgEx(hdc HDC, x int32, y int32, pt *POINT) (ok bool) {
	r0, _, _ := syscall.Syscall6(procSetViewportOrgEx.Addr(), 4, uintptr(hdc), uintptr(x), uintptr(y), uintptr(unsafe.Pointer(pt)), 0, 0)
	ok = r0 != 0
	return
}

func SetWindowExtEx(hdc HDC, x int32, y int32, size *SIZE) (ok bool) {
	r0, _, _ := syscall.Syscall6(procSetWindowExtEx.Addr(), 4, uintptr(hdc), uintptr(x), uintptr(y), uintptr(unsafe.Pointer(size)), 0, 0)
	ok = r0 != 0
	return
}

func TextOut(hdc HDC, x int32, y int32, text string, n int) (err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(text)
	if err != nil {
		return
	}
	return _TextOut(hdc, x, y, _p0, n)
}

func _TextOut(hdc HDC, x int32, y int32, text *uint16, n int) (err error) {
	r1, _, e1 := syscall.Syscall6(procTextOutW.Addr(), 5, uintptr(hdc), uintptr(x), uintptr(y), uintptr(unsafe.Pointer(text)), uintptr(n), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func FreeLibrary(handle HANDLE) (err error) {
	r1, _, e1 := syscall.Syscall(procFreeLibrary.Addr(), 1, uintptr(handle), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func getModuleHandle(moduleName *uint16) (hModule HMODULE, err error) {
	r0, _, e1 := syscall.Syscall(procGetModuleHandleW.Addr(), 1, uintptr(unsafe.Pointer(moduleName)), 0, 0)
	hModule = HMODULE(r0)
	if hModule == 0 {
		err = errnoErr(e1)
	}
	return
}

func GetProcAddress(module HANDLE, procname string) (proc uintptr, err error) {
	var _p0 *byte
	_p0, err = syscall.BytePtrFromString(procname)
	if err != nil {
		return
	}
	return _GetProcAddress(module, _p0)
}

func _GetProcAddress(module HANDLE, procname *byte) (proc uintptr, err error) {
	r0, _, e1 := syscall.Syscall(procGetProcAddress.Addr(), 2, uintptr(module), uintptr(unsafe.Pointer(procname)), 0)
	proc = uintptr(r0)
	if proc == 0 {
		err = errnoErr(e1)
	}
	return
}

func GetStartupInfo(startupInfo *StartupInfo) {
	syscall.Syscall(procGetStartupInfoW.Addr(), 1, uintptr(unsafe.Pointer(startupInfo)), 0, 0)
	return
}

func getSystemDirectory(dir *uint16, dirLen uint32) (len uint32, err error) {
	r0, _, e1 := syscall.Syscall(procGetSystemDirectoryW.Addr(), 2, uintptr(unsafe.Pointer(dir)), uintptr(dirLen), 0)
	len = uint32(r0)
	if len == 0 {
		err = errnoErr(e1)
	}
	return
}

func LoadLibraryEx(libname string, zero HANDLE, flags uintptr) (handle HANDLE, err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(libname)
	if err != nil {
		return
	}
	return _LoadLibraryEx(_p0, zero, flags)
}

func _LoadLibraryEx(libname *uint16, zero HANDLE, flags uintptr) (handle HANDLE, err error) {
	r0, _, e1 := syscall.Syscall(procLoadLibraryExW.Addr(), 3, uintptr(unsafe.Pointer(libname)), uintptr(zero), uintptr(flags))
	handle = HANDLE(r0)
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}

func BeginPaint(hwnd HWND, ps *PAINTSTRUCT) (hdc HDC) {
	r0, _, _ := syscall.Syscall(procBeginPaint.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(ps)), 0)
	hdc = HDC(r0)
	return
}

func CopyRect(dst *RECT, src *RECT) (ok bool) {
	r0, _, _ := syscall.Syscall(procCopyRect.Addr(), 2, uintptr(unsafe.Pointer(dst)), uintptr(unsafe.Pointer(src)), 0)
	ok = r0 != 0
	return
}

func CreateWindowEx(exstyle uint32, className string, windowName string, style uint32, x int32, y int32, width int32, height int32, parent HWND, menu HMENU, instance HINSTANCE, param uintptr) (hwnd HWND, err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(className)
	if err != nil {
		return
	}
	var _p1 *uint16
	_p1, err = syscall.UTF16PtrFromString(windowName)
	if err != nil {
		return
	}
	return _CreateWindowEx(exstyle, _p0, _p1, style, x, y, width, height, parent, menu, instance, param)
}

func _CreateWindowEx(exstyle uint32, className *uint16, windowName *uint16, style uint32, x int32, y int32, width int32, height int32, parent HWND, menu HMENU, instance HINSTANCE, param uintptr) (hwnd HWND, err error) {
	r0, _, e1 := syscall.Syscall12(procCreateWindowExW.Addr(), 12, uintptr(exstyle), uintptr(unsafe.Pointer(className)), uintptr(unsafe.Pointer(windowName)), uintptr(style), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(parent), uintptr(menu), uintptr(instance), uintptr(param))
	hwnd = HWND(r0)
	if hwnd == 0 {
		err = errnoErr(e1)
	}
	return
}

func DefWindowProc(hwnd HWND, msg uint32, wParam uintptr, lParam uintptr) (ret uintptr) {
	r0, _, _ := syscall.Syscall6(procDefWindowProcW.Addr(), 4, uintptr(hwnd), uintptr(msg), uintptr(wParam), uintptr(lParam), 0, 0)
	ret = uintptr(r0)
	return
}

func DispatchMessage(msg *MSG) {
	syscall.Syscall(procDispatchMessageW.Addr(), 1, uintptr(unsafe.Pointer(msg)), 0, 0)
	return
}

func DrawText(hdc HDC, text string, n int32, rect *RECT, format uint32) (ret int32, err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(text)
	if err != nil {
		return
	}
	return _DrawText(hdc, _p0, n, rect, format)
}

func _DrawText(hdc HDC, text *uint16, n int32, rect *RECT, format uint32) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall6(procDrawTextW.Addr(), 5, uintptr(hdc), uintptr(unsafe.Pointer(text)), uintptr(n), uintptr(unsafe.Pointer(rect)), uintptr(format), 0)
	ret = int32(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func EndPaint(hwnd HWND, ps *PAINTSTRUCT) {
	syscall.Syscall(procEndPaint.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(ps)), 0)
	return
}

func FillRect(hdc HDC, lprc *RECT, hbr HBRUSH) (ok bool) {
	r0, _, _ := syscall.Syscall(procFillRect.Addr(), 3, uintptr(hdc), uintptr(unsafe.Pointer(lprc)), uintptr(hbr))
	ok = r0 != 0
	return
}

func FrameRect(hdc HDC, lprc *RECT, hbr HBRUSH) (ok bool) {
	r0, _, _ := syscall.Syscall(procFrameRect.Addr(), 3, uintptr(hdc), uintptr(unsafe.Pointer(lprc)), uintptr(hbr))
	ok = r0 != 0
	return
}

func GetClientRect(hwnd HWND, rect *RECT) (err error) {
	r1, _, e1 := syscall.Syscall(procGetClientRect.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(rect)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func GetDC(hwnd HWND) (hdc HDC) {
	r0, _, _ := syscall.Syscall(procGetDC.Addr(), 1, uintptr(hwnd), 0, 0)
	hdc = HDC(r0)
	return
}

func GetKeyNameText(lparam uintptr, buffer *uint16, size int32) (ret int32) {
	r0, _, _ := syscall.Syscall(procGetKeyNameTextW.Addr(), 3, uintptr(lparam), uintptr(unsafe.Pointer(buffer)), uintptr(size))
	ret = int32(r0)
	return
}

func GetMessage(msg *MSG, hwnd HWND, msgFilterMin uint32, msgFilterMax uint32) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall6(procGetMessageW.Addr(), 4, uintptr(unsafe.Pointer(msg)), uintptr(hwnd), uintptr(msgFilterMin), uintptr(msgFilterMax), 0, 0)
	ret = int32(r0)
	if ret == -1 {
		err = errnoErr(e1)
	}
	return
}

func GetScrollInfo(hwnd HWND, nBar int32, si *SCROLLINFO) (ok bool, err error) {
	r0, _, e1 := syscall.Syscall(procGetScrollInfo.Addr(), 3, uintptr(hwnd), uintptr(nBar), uintptr(unsafe.Pointer(si)))
	ok = r0 != 0
	if ok == false {
		err = errnoErr(e1)
	}
	return
}

func GetScrollPos(hwnd HWND, nBar int32) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall(procGetScrollPos.Addr(), 2, uintptr(hwnd), uintptr(nBar), 0)
	ret = int32(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func GetSystemMetrics(nIndex int32) (ret int32) {
	r0, _, _ := syscall.Syscall(procGetSystemMetrics.Addr(), 1, uintptr(nIndex), 0, 0)
	ret = int32(r0)
	return
}

func GetUpdateRect(hwnd HWND, rect *RECT, erase bool) (notEmpty bool) {
	var _p0 uint32
	if erase {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall(procGetUpdateRect.Addr(), 3, uintptr(hwnd), uintptr(unsafe.Pointer(rect)), uintptr(_p0))
	notEmpty = r0 != 0
	return
}

func InflateRect(rect *RECT, x int32, y int32) (ok bool) {
	r0, _, _ := syscall.Syscall(procInflateRect.Addr(), 3, uintptr(unsafe.Pointer(rect)), uintptr(x), uintptr(y))
	ok = r0 != 0
	return
}

func IntersectRect(dst *RECT, src1 *RECT, src2 *RECT) (intersect bool) {
	r0, _, _ := syscall.Syscall(procIntersectRect.Addr(), 3, uintptr(unsafe.Pointer(dst)), uintptr(unsafe.Pointer(src1)), uintptr(unsafe.Pointer(src2)))
	intersect = r0 != 0
	return
}

func InvalidateRect(hwnd HWND, rect *RECT, erase bool) (err error) {
	var _p0 uint32
	if erase {
		_p0 = 1
	}
	r1, _, e1 := syscall.Syscall(procInvalidateRect.Addr(), 3, uintptr(hwnd), uintptr(unsafe.Pointer(rect)), uintptr(_p0))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func InvalidateRgn(hwnd HWND, hrgn HRGN, erase bool) {
	var _p0 uint32
	if erase {
		_p0 = 1
	}
	syscall.Syscall(procInvalidateRgn.Addr(), 3, uintptr(hwnd), uintptr(hrgn), uintptr(_p0))
	return
}

func InvertRect(hdc HDC, lprc *RECT) (ok bool) {
	r0, _, _ := syscall.Syscall(procInvertRect.Addr(), 2, uintptr(hdc), uintptr(unsafe.Pointer(lprc)), 0)
	ok = r0 != 0
	return
}

func IsRectEmpty(rect *RECT) (empty bool) {
	r0, _, _ := syscall.Syscall(procIsRectEmpty.Addr(), 1, uintptr(unsafe.Pointer(rect)), 0, 0)
	empty = r0 != 0
	return
}

func LoadCursor(hInstance HINSTANCE, cursorName string) (hCursor HCURSOR, err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(cursorName)
	if err != nil {
		return
	}
	return _LoadCursor(hInstance, _p0)
}

func _LoadCursor(hInstance HINSTANCE, cursorName *uint16) (hCursor HCURSOR, err error) {
	r0, _, e1 := syscall.Syscall(procLoadCursorW.Addr(), 2, uintptr(hInstance), uintptr(unsafe.Pointer(cursorName)), 0)
	hCursor = HCURSOR(r0)
	if hCursor == 0 {
		err = errnoErr(e1)
	}
	return
}

func LoadIcon(hInstance HINSTANCE, iconName string) (hIcon HICON, err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(iconName)
	if err != nil {
		return
	}
	return _LoadIcon(hInstance, _p0)
}

func _LoadIcon(hInstance HINSTANCE, iconName *uint16) (hIcon HICON, err error) {
	r0, _, e1 := syscall.Syscall(procLoadIconW.Addr(), 2, uintptr(hInstance), uintptr(unsafe.Pointer(iconName)), 0)
	hIcon = HICON(r0)
	if hIcon == 0 {
		err = errnoErr(e1)
	}
	return
}

func MessageBox(hwnd HWND, text string, caption string, boxtype uint32) (ret int32, err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(text)
	if err != nil {
		return
	}
	var _p1 *uint16
	_p1, err = syscall.UTF16PtrFromString(caption)
	if err != nil {
		return
	}
	return _MessageBox(hwnd, _p0, _p1, boxtype)
}

func _MessageBox(hwnd HWND, text *uint16, caption *uint16, boxtype uint32) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall6(procMessageBoxW.Addr(), 4, uintptr(hwnd), uintptr(unsafe.Pointer(text)), uintptr(unsafe.Pointer(caption)), uintptr(boxtype), 0, 0)
	ret = int32(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func OffsetRect(rect *RECT, x int32, y int32) (ok bool) {
	r0, _, _ := syscall.Syscall(procOffsetRect.Addr(), 3, uintptr(unsafe.Pointer(rect)), uintptr(x), uintptr(y))
	ok = r0 != 0
	return
}

func PeekMessage(msg *MSG, hwnd HWND, msgFilterMin uint32, msgFilterMax uint32, removeMsg uint32) (msgAvail bool) {
	r0, _, _ := syscall.Syscall6(procPeekMessageW.Addr(), 5, uintptr(unsafe.Pointer(msg)), uintptr(hwnd), uintptr(msgFilterMin), uintptr(msgFilterMax), uintptr(removeMsg), 0)
	msgAvail = r0 != 0
	return
}

func PostQuitMessage(exitCode int32) {
	syscall.Syscall(procPostQuitMessage.Addr(), 1, uintptr(exitCode), 0, 0)
	return
}

func RegisterClass(wc *WNDCLASS) (atom ATOM, err error) {
	r0, _, e1 := syscall.Syscall(procRegisterClassW.Addr(), 1, uintptr(unsafe.Pointer(wc)), 0, 0)
	atom = ATOM(r0)
	if atom == 0 {
		err = errnoErr(e1)
	}
	return
}

func ReleaseDC(hwnd HWND, hdc HDC) (err error) {
	r1, _, e1 := syscall.Syscall(procReleaseDC.Addr(), 2, uintptr(hwnd), uintptr(hdc), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func ScrollWindow(hwnd HWND, dx int32, dy int32, rect *RECT, clipRect *RECT) (ok bool, err error) {
	r0, _, e1 := syscall.Syscall6(procScrollWindow.Addr(), 5, uintptr(hwnd), uintptr(dx), uintptr(dy), uintptr(unsafe.Pointer(rect)), uintptr(unsafe.Pointer(clipRect)), 0)
	ok = r0 != 0
	if ok == false {
		err = errnoErr(e1)
	}
	return
}

func SendMessage(hwnd HWND, msg uint32, wParam uintptr, lParam uintptr) (lResult uintptr) {
	r0, _, _ := syscall.Syscall6(procSendMessageW.Addr(), 4, uintptr(hwnd), uintptr(msg), uintptr(wParam), uintptr(lParam), 0, 0)
	lResult = uintptr(r0)
	return
}

func SetCursor(hCursor HCURSOR) (hCursorOld HCURSOR) {
	r0, _, _ := syscall.Syscall(procSetCursor.Addr(), 1, uintptr(hCursor), 0, 0)
	hCursorOld = HCURSOR(r0)
	return
}

func SetRect(rect *RECT, left int32, top int32, right int32, bottom int32) (ok bool) {
	r0, _, _ := syscall.Syscall6(procSetRect.Addr(), 5, uintptr(unsafe.Pointer(rect)), uintptr(left), uintptr(top), uintptr(right), uintptr(bottom), 0)
	ok = r0 != 0
	return
}

func SetRectEmpty(rect *RECT) (ok bool) {
	r0, _, _ := syscall.Syscall(procSetRectEmpty.Addr(), 1, uintptr(unsafe.Pointer(rect)), 0, 0)
	ok = r0 != 0
	return
}

func SetScrollInfo(hwnd HWND, nBar int32, si *SCROLLINFO, redraw bool) (pos int32) {
	var _p0 uint32
	if redraw {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall6(procSetScrollInfo.Addr(), 4, uintptr(hwnd), uintptr(nBar), uintptr(unsafe.Pointer(si)), uintptr(_p0), 0, 0)
	pos = int32(r0)
	return
}

func SetScrollPos(hwnd HWND, nBar int32, nPos int32, bRedraw bool) (ret int32, err error) {
	var _p0 uint32
	if bRedraw {
		_p0 = 1
	}
	r0, _, e1 := syscall.Syscall6(procSetScrollPos.Addr(), 4, uintptr(hwnd), uintptr(nBar), uintptr(nPos), uintptr(_p0), 0, 0)
	ret = int32(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func SetScrollRange(hwnd HWND, nBar int32, nMinPos int32, nMaxPos int32, bRedraw bool) (ret BOOL, err error) {
	var _p0 uint32
	if bRedraw {
		_p0 = 1
	}
	r0, _, e1 := syscall.Syscall6(procSetScrollRange.Addr(), 5, uintptr(hwnd), uintptr(nBar), uintptr(nMinPos), uintptr(nMaxPos), uintptr(_p0), 0)
	ret = BOOL(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func ShowCursor(show bool) (count int32) {
	var _p0 uint32
	if show {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall(procShowCursor.Addr(), 1, uintptr(_p0), 0, 0)
	count = int32(r0)
	return
}

func ShowWindow(hwnd HWND, nCmdShow int32) (wasVisible bool) {
	r0, _, _ := syscall.Syscall(procShowWindow.Addr(), 2, uintptr(hwnd), uintptr(nCmdShow), 0)
	wasVisible = r0 != 0
	return
}

func TranslateMessage(msg *MSG) (translated bool) {
	r0, _, _ := syscall.Syscall(procTranslateMessage.Addr(), 1, uintptr(unsafe.Pointer(msg)), 0, 0)
	translated = r0 != 0
	return
}

func UnionRect(dst *RECT, src1 *RECT, src2 *RECT) (nonempty bool) {
	r0, _, _ := syscall.Syscall(procUnionRect.Addr(), 3, uintptr(unsafe.Pointer(dst)), uintptr(unsafe.Pointer(src1)), uintptr(unsafe.Pointer(src2)))
	nonempty = r0 != 0
	return
}

func UpdateWindow(hwnd HWND) (ok bool) {
	r0, _, _ := syscall.Syscall(procUpdateWindow.Addr(), 1, uintptr(hwnd), 0, 0)
	ok = r0 != 0
	return
}

func ValidateRect(hwnd HWND, rect *RECT) (ok bool) {
	r0, _, _ := syscall.Syscall(procValidateRect.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(rect)), 0)
	ok = r0 != 0
	return
}

func ValidateRgn(hwnd HWND, hrgn HRGN) (ok bool) {
	r0, _, _ := syscall.Syscall(procValidateRgn.Addr(), 2, uintptr(hwnd), uintptr(hrgn), 0)
	ok = r0 != 0
	return
}

func PlaySound(sound string, hmod uintptr, flags uint32) (err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(sound)
	if err != nil {
		return
	}
	return _PlaySound(_p0, hmod, flags)
}

func _PlaySound(sound *uint16, hmod uintptr, flags uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procPlaySoundW.Addr(), 3, uintptr(unsafe.Pointer(sound)), uintptr(hmod), uintptr(flags))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}
